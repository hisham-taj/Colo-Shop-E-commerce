<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Admin Categories</title>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />

  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <link rel="stylesheet" href="/styles/adminstyle/admin-categories.css" />
</head>

<body>
  <div class="admin-container">
    <div class="sidebar">
      <div class="logo">
        <i class="fas fa-cog"></i>
        <h2>Admin Panel</h2>
      </div>
      <nav>
        <ul>
          <li>
            <a href="/admin"><i class="fas fa-home"></i> Dashboard</a>
          </li>
          <li>
            <a href="/admin/admin-products"><i class="fas fa-box"></i> Products</a>
          </li>
          <li>
            <a href="/admin/admin-categories" class="active"><i class="fas fa-tags"></i> Categories</a>
          </li>
          <li>
            <a href="/admin/adminOrders"><i class="fas fa-shopping-cart"></i> Orders</a>
          </li>
          <li>
            <a href="/admin/admin-users"><i class="fas fa-sitemap"></i> Users</a>
          </li>
        </ul>
      </nav>
    </div>
    <div class="main-content">
      <header>
        <h1>Categories</h1>
        <div class="user-info">
          <span>Welcome, <%= admin.name %></span>
          <% if (isAuth) { %>
            <a href="/admin/adminlogout" class="logout-btn"><i class="fas fa-sign-out-alt"></i> Logout</a>
            <% } else { %>
              <a href="/admin/admin-login" class="logout-btn"><i class="fa fa-sign-in" aria-hidden="true"></i> Sign
                In</a>
              <a href="/admin/admin-signup" class="logout-btn"><i class="fa fa-user-plus" aria-hidden="true"></i>
                Register</a>
              <% } %>
        </div>
      </header>
      <div class="dashboard-content">
        <!-- Add Category Form -->
        <div class="card">
          <h3>Add Category</h3>
          <form id="add-category-form" action="/admin/add-category" method="POST">
            <label for="category-name">Category Name:</label>
            <input type="text" id="category-name" name="categoryName" />
            <button type="button" class="btn btn-add add-category">
              Add Category
            </button>
          </form>
        </div>

        <!-- Add Subcategory Form -->
        <div class="card">
          <h3>Add Subcategory</h3>
          <form id="add-subcategory-form" action="/admin/add-subcategory" method="POST">
            <label for="subcategory-name">Subcategory Name:</label>
            <input type="text" id="subcategory-name" name="subcategoryName" required />
            <label for="parent-category">Parent Category:</label>
            <select id="parent-category" name="parentCategory" required>
              <option value="" disabled selected>
                Select Parent Category
              </option>
              <% cat.forEach(cat=> { %>
                <option value="<%= cat._id %>">
                  <%= cat.name %>
                </option>
                <% }); %>
            </select>
            <button type="button" class="btn btn-add add-subcategory">
              Add Subcategory
            </button>
          </form>
        </div>

        <!-- Categories List -->
        <div class="catcard" id="card-cat">
          <h3>Categories and Subcategories</h3>
          <ul id="categories-list">
            <% cat.forEach(Cat=> { %>
              <li class="category-item" data-id="<%= Cat._id %>">
                <div class="category-details">
                  <span class="category-name">
                    <%= Cat.name %>
                  </span>
                  <div class="editBtn">
                    <button class="btn btn-edit" onclick="showEditForm('<%= Cat._id %>')">Edit category</button>
                  </div>
                </div>
                <form class="edit-category-form" data-id="<%= Cat._id %>" style="display:none;">
                  <input type="text" name="category-name" value="<%= Cat.name %>" required />
                  <button type="button" class="btn btn-save" onclick="saveCategory('<%= Cat._id %>')">Save</button>
                  <button type="button" class="btn btn-cancel" onclick="cancelEdit('<%= Cat._id %>')">Cancel</button>
                </form>
                <div class="subcategories-list">
                  <% subcat.filter(sub=> sub.parentCategory.toString() === Cat._id.toString()).forEach(subcat => { %>
                    <div class="subcategory-item">
                      <div class="subcategory-name"><span>
                          <%= subcat.name %>
                        </span></div>
                      <div><button class="btn btn-edit sub-edit" onclick="showsubEditForm('<%= subcat._id %>')">Editsubcategory</button>
                      <button  class="btn btn-edit deletebutton" onclick="deleteButton('<%= subcat._id %>')"><i class="fas fa-trash"></i> Delete</button></div>
                    </div>
                    <form class="edit-subcategory-form" data-id="<%= subcat._id %>" style="display:none;">
                      <input type="text" name="subcategory-name" value="<%= subcat.name %>" required />
                      <button type="button" class="btn btn-save"
                        onclick="savesubCategory('<%= subcat._id %>')">Save</button>
                      <button type="button" class="btn btn-cancel"
                        onclick="cancelsubEdit('<%= subcat._id %>')">Cancel</button>
                    </form>
                    <% }); %>
                </div>
              </li>
              <% }); %>
          </ul>
        </div>



      </div>
    </div>
  </div>
  </div>

  <script>
document.addEventListener("DOMContentLoaded", function () {
  // Add category
  const addCategoryButton = document.querySelector(".add-category");
  addCategoryButton.addEventListener("click", async () => {
    const catName = document.querySelector("#category-name").value;
    if (catName === "") {
      Swal.fire({
        icon: "error",
        title: "Oops...",
        text: "Category name cannot be empty!",
      });
      return;
    }

    const response = await fetch(`/admin/add-category`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ catName }),
    });

    const data = await response.json();

    if (data.success) {
      Swal.fire({
        position: "top-end",
        icon: "success",
        title: "Category added successfully",
        showConfirmButton: false,
        timer: 1500,
      });

      const categoryElement = document.getElementById("categories-list");
      const newCategory = `
        <li class="category-item" data-id="${data.newCat._id}">
          <div class="category-details">
            <span class="category-name">${data.newCat.name}</span>
            <div class="editBtn">
              <button class="btn btn-edit" onclick="showEditForm('${data.newCat._id}')">Edit category</button>
            </div>
          </div>
          <form class="edit-category-form" data-id="${data.newCat._id}" style="display:none;">
            <input type="text" name="category-name" value="${data.newCat.name}" required />
            <button type="button" class="btn btn-save" onclick="saveCategory('${data.newCat._id}')">Save</button>
            <button type="button" class="btn btn-cancel" onclick="cancelEdit('${data.newCat._id}')">Cancel</button>
          </form>
          <div class="subcategories-list"></div>
        </li>`;
      categoryElement.innerHTML += newCategory;

      // Clear input field
      document.getElementById("category-name").value = "";
    } else {
      Swal.fire("Error", "Category creation failed", "error");
    }
  });

  // Add subcategory
  const addSubcategoryButton = document.querySelector(".add-subcategory");
  addSubcategoryButton.addEventListener("click", async () => {
    const subcatName = document.querySelector("#subcategory-name").value;
    const parentCategory = document.querySelector("#parent-category").value;

    if (subcatName === "") {
      Swal.fire({
        icon: "error",
        title: "Oops...",
        text: "Subcategory name cannot be empty!",
      });
      return;
    }

    if (parentCategory === "") {
      Swal.fire({
        icon: "error",
        title: "Please select a category!",
      });
      return;
    }

    const response = await fetch(`/admin/add-subcategory`, {
      method: "POST",
      headers: {   
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ subcatName, parentCategory }),
    });

    const data = await response.json();

    if (data.success) {
      Swal.fire({
        position: "center",
        icon: "success",
        title: "Subcategory added successfully",
        showConfirmButton: false,
        timer: 1500,
      });

      // Select the correct subcategory list for the parent category
      const categoryElement = document.querySelector(`.category-item[data-id="${parentCategory}"] .subcategories-list`);

      // Dynamically create and append the new subcategory element
      const newSubCategory = `
        <div class="subcategory-item">
          <div class="subcategory-name"><span>${data.newSubCat.name}</span></div>
          <div><button class="btn btn-edit sub-edit" onclick="showsubEditForm('<%= subcat._id %>')">Editsubcategory</button>
                      <button  class="btn btn-edit deletebutton" onclick="deleteButton('<%= subcat._id %>')"><i class="fas fa-trash"></i> Delete</button></div>
        </div>
        <form class="edit-subcategory-form" data-id="${data.newSubCat._id}" style="display:none;">
          <input type="text" name="subcategory-name" value="${data.newSubCat.name}" required />
          <button type="button" class="btn btn-save" onclick="savesubCategory('${data.newSubCat._id}')">Save</button>
          <button type="button" class="btn btn-cancel" onclick="cancelsubEdit('${data.newSubCat._id}')">Cancel</button>
        </form>`;
      categoryElement.innerHTML += newSubCategory;

      // Clear input fields
      document.getElementById("subcategory-name").value = "";
      document.getElementById("parent-category").value = "";
    } else {
      Swal.fire("Error", "Subcategory creation failed", "error");
    }
  });
});

// Edit category
async function saveCategory(id) {
  const form = document.querySelector(`.edit-category-form[data-id="${id}"]`);
  const catName = form.querySelector("input[name='category-name']").value;

  if (catName === "") {
    Swal.fire({
      icon: "error",
      title: "Oops...",
      text: "Category name cannot be empty!",
    });
    return;
  }

  const response = await fetch(`/admin/edit-category/${id}`, {
    method: "PUT",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify({ name: catName }),
  });

  if (response.ok) {
    Swal.fire({
      position: "center",
      icon: "success",
      title: "Category updated successfully",
      showConfirmButton: false,
      timer: 1500,
    });

    const details = form.previousElementSibling;
    details.querySelector(".category-name").innerText = catName;
    cancelEdit(id);
  } else {
    Swal.fire("Error", "Category update failed", "error");
  }
}

// Edit subcategory
async function savesubCategory(id) {
  const form = document.querySelector(`.edit-subcategory-form[data-id="${id}"]`);
  const subCatName = form.querySelector("input[name='subcategory-name']").value;

  if (subCatName === "") {
    Swal.fire({
      icon: "error",
      title: "Oops...",
      text: "Subcategory name cannot be empty!",
    });
    return;
  }

  const response = await fetch(`/admin/edit-subcategory/${id}`, {
    method: "PUT",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify({ name: subCatName }),
  });

  if (response.ok) {
    Swal.fire({
      position: "center",
      icon: "success",
      title: "Subcategory updated successfully",
      showConfirmButton: false,
      timer: 1500,
    });

    const details = form.previousElementSibling;
    details.querySelector(".subcategory-name").innerText = subCatName;
    cancelsubEdit(id);
  } else {
    Swal.fire("Error", "Subcategory update failed", "error");
  }
}

function showEditForm(id) {
  document.querySelectorAll('.edit-category-form').forEach(form => form.style.display = 'none');
  document.querySelector(`.edit-category-form[data-id="${id}"]`).style.display = 'block';
}

function cancelEdit(id) {
  document.querySelector(`.edit-category-form[data-id="${id}"]`).style.display = 'none';
}

function showsubEditForm(id) {
  document.querySelectorAll('.edit-subcategory-form').forEach(form => form.style.display = 'none');
  document.querySelector(`.edit-subcategory-form[data-id="${id}"]`).style.display = 'block';
}

function cancelsubEdit(id) {
  document.querySelector(`.edit-subcategory-form[data-id="${id}"]`).style.display = 'none';
}

async function deleteButton(id) {
  try {
    // Confirm deletion
    const result = await Swal.fire({
      title: 'Are you sure?',
      text: "This action cannot be undone!",
      icon: 'warning',
      showCancelButton: true,
      confirmButtonColor: '#3085d6',
      cancelButtonColor: '#d33',
      confirmButtonText: 'Yes, delete it!'
    });

    if (result.isConfirmed) {
      // Make DELETE request
      const response = await fetch(`/admin/delete-subcategory/${id}`, {
        method: "DELETE",
        headers: {
          "Content-Type": "application/json",
        },
      });

      if (response.ok) {
        // Success alert
        Swal.fire({
          position: "center",
          icon: "success",
          title: "Subcategory deleted successfully",
          showConfirmButton: false,
          timer: 1500,
        });

        // Remove the subcategory from the DOM
        const subcategoryItem = document.querySelector(`.subcategory-item[data-id="${id}"]`);
        if (subcategoryItem) {
          subcategoryItem.remove();  // Remove from DOM
        } else {
          console.error("Subcategory item not found for deletion.");
        }
      } else {
        const data = await response.json();
        Swal.fire({
          position: "center",
          icon: "error",
          title: data.message || "Error deleting subcategory",
          showConfirmButton: true,
        });
      }
    }
  } catch (error) {
    console.error("Network error:", error);
    Swal.fire({
      position: "center",
      icon: "error",
      title: "Server error occurred",
      showConfirmButton: true,
    });
  }
}




  </script>
</body>

</html>